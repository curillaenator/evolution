/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/hierarchy': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Получение root иерархии */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Элемент найден */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Item'];
          };
        };
        /** @description Элемент не найден */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Создание элемента иерархии */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['CreateItemPayload'];
        };
      };
      responses: {
        /** @description Элемент успешно создан */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/hierarchy/{itemId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Получение элемента иерархии по ID */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          itemId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Элемент найден */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Item'];
          };
        };
        /** @description Элемент не найден */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    /** Удаление элемента с перемещением его детей */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          itemId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Элемент удалён, дети перемещены */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Item'];
          };
        };
        /** @description Элемент не найден */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Item: {
      id: string;
      parent: string | null;
      name: string;
      locked: boolean;
      children: string[] | null;
      createdAt?: number;
      createdBy?: string;
      updatedAt?: number;
      updatedBy?: string;
    };
    CreateItemPayload: {
      parentId: string | null;
      item: components['schemas']['Item'];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
